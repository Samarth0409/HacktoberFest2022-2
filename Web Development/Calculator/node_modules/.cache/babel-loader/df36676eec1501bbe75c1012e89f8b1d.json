{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  currentOperand: \"\",\n  prevOperand: \"\",\n  operation: \"\"\n};\n\nconst Evaluate = _ref => {\n  let {\n    currentOperand,\n    prevOperand,\n    operation\n  } = _ref;\n  const current = parseFloat(currentOperand);\n  const prev = parseFloat(prevOperand);\n  if (isNaN(current) || isNaN(prev)) return \"\";\n  let result = \"\";\n\n  switch (operation) {\n    case \"+\":\n      result = prev + current;\n      break;\n\n    case \"-\":\n      result = prev - current;\n      break;\n\n    case \"x\":\n      result = prev * current;\n      break;\n\n    case \"รท\":\n      result = prev / current;\n      break;\n  }\n\n  return result.toString();\n};\n\n_c = Evaluate;\nexport const digitSlice = createSlice({\n  name: \"CalculatorState\",\n  initialState,\n  reducers: {\n    addDigit: (state, action) => {\n      if (state.currentOperand === '0' && action.payload === '0') {\n        return state;\n      }\n\n      if (state.currentOperand.includes('.') && action.payload === '.') {\n        return state;\n      }\n\n      return { ...state,\n        currrentOperand: `${state.currentOperand || \"\"}${action.payload}`\n      };\n    },\n    clearDigit: state => {\n      return { ...state,\n        currrentOperand: \"\",\n        prevOperand: \"\",\n        operation: \"\"\n      };\n    },\n    removeLastDigit: state => {\n      const remainingDigit = `${state.currentOperand.slice(0, -1)}`;\n      return { ...state,\n        currrentOperand: remainingDigit\n      };\n    },\n    chooseOperation: (state, action) => {\n      if (state.prevOperand === \"\") {\n        return { ...state,\n          operation: action.payload,\n          prevOperand: state.currentOperand,\n          currrentOperand: \"\"\n        };\n      }\n\n      return { ...state,\n        prevOperand: Evaluate(state),\n        currrentOperand: \"\",\n        operation: \"\"\n      };\n    }\n  }\n});\nexport const {\n  addDigit,\n  clearDigit,\n  removeLastDigit,\n  chooseOperation\n} = digitSlice.actions;\nexport default digitSlice.reducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Evaluate\");","map":{"version":3,"names":["createSlice","initialState","currentOperand","prevOperand","operation","Evaluate","current","parseFloat","prev","isNaN","result","toString","digitSlice","name","reducers","addDigit","state","action","payload","includes","currrentOperand","clearDigit","removeLastDigit","remainingDigit","slice","chooseOperation","actions","reducer"],"sources":["C:/Users/Fomonyuytar/Desktop/learning/calculator/src/store/features/digitSlice.ts"],"sourcesContent":["import { createSlice ,PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\ninterface CalculatorState{\r\n    currentOperand:string;\r\n        prevOperand?: string;\r\n        operation?:string;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst initialState : CalculatorState= {\r\n  \r\n    \r\n        currentOperand:\"\",\r\n        prevOperand:\"\",\r\n        operation:\"\"\r\n    \r\n}\r\n\r\ninterface arguements{\r\n    currentOperand:string,\r\n    prevOperand:string,\r\n    operation:string\r\n\r\n}\r\n\r\n\r\nconst Evaluate= ({currentOperand ,prevOperand ,operation}:CalculatorState) => {\r\n\r\n    const current = parseFloat(currentOperand)\r\n    const prev = parseFloat(prevOperand)\r\n\r\n    if(isNaN(current) || isNaN(prev)) return \"\"\r\n \r\n       let result: string | number=\"\"\r\n\r\n    switch (operation){\r\n        case \"+\":\r\n            result=  prev + current\r\n            break\r\n        case \"-\":\r\n            result=  prev - current\r\n            break\r\n        case \"x\":\r\n            result=  prev * current\r\n            break\r\n\r\n        case \"รท\":\r\n            result=  prev / current\r\n            break\r\n}\r\n\r\n    return result.toString()\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const digitSlice =  createSlice({\r\n\r\n    name :\"CalculatorState\",\r\n    initialState,\r\n\r\n    reducers:{\r\n\r\n        addDigit:(state , action:PayloadAction<string>)=>{\r\n            if(state.currentOperand === '0'&& action.payload ==='0'){\r\n                return  state;\r\n\r\n            }\r\n            if(state.currentOperand.includes('.')  && action.payload ==='.'){\r\n                return state;\r\n\r\n            }\r\n        return  {\r\n        \r\n                \r\n                    ...state,\r\n                    currrentOperand:`${state.currentOperand || \"\" }${action.payload}` \r\n                    \r\n                                     \r\n                \r\n                    \r\n                \r\n            }\r\n        },\r\n\r\n        clearDigit:(state)=>{\r\n             \r\n            return {\r\n                ...state,\r\n                currrentOperand:\"\",\r\n                prevOperand:\"\",\r\n                operation:\"\"\r\n\r\n                \r\n            }\r\n\r\n        },\r\n        removeLastDigit: (state )=>{\r\n            const remainingDigit:string=`${state.currentOperand.slice(0, -1)}`\r\n\r\n            return   { ...state, currrentOperand:remainingDigit }\r\n                \r\n               \r\n                \r\n            \r\n    \r\n        },\r\n        chooseOperation:(state , action:PayloadAction<string> ) => {\r\n\r\n            if(state.prevOperand === \"\"){\r\n\r\n                return{ ...state , operation:action.payload ,prevOperand:state.currentOperand ,currrentOperand:\"\"}\r\n\r\n            }\r\n\r\n            return {...state , prevOperand:Evaluate(state),currrentOperand:\"\",operation:\"\"}\r\n        }\r\n    \r\n        \r\n\r\n    }\r\n   \r\n\r\n\r\n}) \r\n\r\n\r\nexport const {addDigit ,clearDigit ,removeLastDigit ,chooseOperation}= digitSlice.actions\r\n\r\n\r\nexport default digitSlice.reducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAiBA,MAAMC,YAA8B,GAAE;EAG9BC,cAAc,EAAC,EAHe;EAI9BC,WAAW,EAAC,EAJkB;EAK9BC,SAAS,EAAC;AALoB,CAAtC;;AAiBA,MAAMC,QAAQ,GAAE,QAA8D;EAAA,IAA7D;IAACH,cAAD;IAAiBC,WAAjB;IAA8BC;EAA9B,CAA6D;EAE1E,MAAME,OAAO,GAAGC,UAAU,CAACL,cAAD,CAA1B;EACA,MAAMM,IAAI,GAAGD,UAAU,CAACJ,WAAD,CAAvB;EAEA,IAAGM,KAAK,CAACH,OAAD,CAAL,IAAkBG,KAAK,CAACD,IAAD,CAA1B,EAAkC,OAAO,EAAP;EAE/B,IAAIE,MAAuB,GAAC,EAA5B;;EAEH,QAAQN,SAAR;IACI,KAAK,GAAL;MACIM,MAAM,GAAGF,IAAI,GAAGF,OAAhB;MACA;;IACJ,KAAK,GAAL;MACII,MAAM,GAAGF,IAAI,GAAGF,OAAhB;MACA;;IACJ,KAAK,GAAL;MACII,MAAM,GAAGF,IAAI,GAAGF,OAAhB;MACA;;IAEJ,KAAK,GAAL;MACII,MAAM,GAAGF,IAAI,GAAGF,OAAhB;MACA;EAbR;;EAgBA,OAAOI,MAAM,CAACC,QAAP,EAAP;AAEH,CA3BD;;KAAMN,Q;AAiCN,OAAO,MAAMO,UAAU,GAAIZ,WAAW,CAAC;EAEnCa,IAAI,EAAE,iBAF6B;EAGnCZ,YAHmC;EAKnCa,QAAQ,EAAC;IAELC,QAAQ,EAAC,CAACC,KAAD,EAASC,MAAT,KAAwC;MAC7C,IAAGD,KAAK,CAACd,cAAN,KAAyB,GAAzB,IAA+Be,MAAM,CAACC,OAAP,KAAkB,GAApD,EAAwD;QACpD,OAAQF,KAAR;MAEH;;MACD,IAAGA,KAAK,CAACd,cAAN,CAAqBiB,QAArB,CAA8B,GAA9B,KAAuCF,MAAM,CAACC,OAAP,KAAkB,GAA5D,EAAgE;QAC5D,OAAOF,KAAP;MAEH;;MACL,OAAQ,EAGI,GAAGA,KAHP;QAIII,eAAe,EAAE,GAAEJ,KAAK,CAACd,cAAN,IAAwB,EAAI,GAAEe,MAAM,CAACC,OAAQ;MAJpE,CAAR;IAWC,CAtBI;IAwBLG,UAAU,EAAEL,KAAD,IAAS;MAEhB,OAAO,EACH,GAAGA,KADA;QAEHI,eAAe,EAAC,EAFb;QAGHjB,WAAW,EAAC,EAHT;QAIHC,SAAS,EAAC;MAJP,CAAP;IASH,CAnCI;IAoCLkB,eAAe,EAAGN,KAAD,IAAU;MACvB,MAAMO,cAAqB,GAAE,GAAEP,KAAK,CAACd,cAAN,CAAqBsB,KAArB,CAA2B,CAA3B,EAA8B,CAAC,CAA/B,CAAkC,EAAjE;MAEA,OAAS,EAAE,GAAGR,KAAL;QAAYI,eAAe,EAACG;MAA5B,CAAT;IAMH,CA7CI;IA8CLE,eAAe,EAAC,CAACT,KAAD,EAASC,MAAT,KAA2C;MAEvD,IAAGD,KAAK,CAACb,WAAN,KAAsB,EAAzB,EAA4B;QAExB,OAAM,EAAE,GAAGa,KAAL;UAAaZ,SAAS,EAACa,MAAM,CAACC,OAA9B;UAAuCf,WAAW,EAACa,KAAK,CAACd,cAAzD;UAAyEkB,eAAe,EAAC;QAAzF,CAAN;MAEH;;MAED,OAAO,EAAC,GAAGJ,KAAJ;QAAYb,WAAW,EAACE,QAAQ,CAACW,KAAD,CAAhC;QAAwCI,eAAe,EAAC,EAAxD;QAA2DhB,SAAS,EAAC;MAArE,CAAP;IACH;EAvDI;AAL0B,CAAD,CAA/B;AAuEP,OAAO,MAAM;EAACW,QAAD;EAAWM,UAAX;EAAuBC,eAAvB;EAAwCG;AAAxC,IAA0Db,UAAU,CAACc,OAA3E;AAGP,eAAed,UAAU,CAACe,OAA1B"},"metadata":{},"sourceType":"module"}