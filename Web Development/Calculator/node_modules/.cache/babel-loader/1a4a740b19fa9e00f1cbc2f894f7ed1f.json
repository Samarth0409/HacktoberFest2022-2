{"ast":null,"code":"import _objectSpread from\"C:/Users/Fomonyuytar/Desktop/learning/calculator/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{createSlice}from\"@reduxjs/toolkit\";// interface of the state of the app\n// default state\nvar initialState={currentOperand:\"\",prevOperand:\"\",operation:\"\",overwrite:false};//function  to give results based on the operation choosen\nvar Evaluate=function Evaluate(_ref){var currentOperand=_ref.currentOperand,prevOperand=_ref.prevOperand,operation=_ref.operation;var current=parseFloat(currentOperand);var prev=parseFloat(prevOperand);//return empty string if both operands ane not numbers\nif(isNaN(current)||isNaN(prev))return\"\";var result=\"\";// handle the individual arithmetic operar=tions\nswitch(operation){case\"+\":result=prev+current;break;case\"-\":result=prev-current;break;case\"×\":result=prev*current;break;case\"÷\":result=prev/current;break;}return result.toString();};//Digit Slice in the redux toolkit\nexport var digitSlice=createSlice({name:\"CalculatorState\",initialState:initialState,reducers:{//handle adding digit behinf the other when clicked\naddDigit:function addDigit(state,action){if(state.overwrite){return _objectSpread(_objectSpread({},state),{},{overwrite:false,currentOperand:action.payload});}if(state.currentOperand===\"0\"&&action.payload===\"0\"){return state;}if(state.currentOperand.includes(\".\")&&action.payload===\".\"){return state;}var addedDigit=\"\".concat(state.currentOperand||\" \").concat(action.payload);return _objectSpread(_objectSpread({},state),{},{currentOperand:addedDigit});},//clearing the screen\nclearDigit:function clearDigit(state){return _objectSpread(_objectSpread({},state),{},{currentOperand:\"\",prevOperand:\"\",operation:\"\"});},//delete last digit\nremoveLastDigit:function removeLastDigit(state){var remainingDigit=\"\".concat(state.currentOperand.slice(0,-1));return _objectSpread(_objectSpread({},state),{},{currentOperand:remainingDigit});},//choose operation whether + - *\nchooseOperation:function chooseOperation(state,action){if(state.currentOperand===\"\"&&state.prevOperand===\"\"){return state;}if(state.currentOperand===\"\"){return _objectSpread(_objectSpread({},state),{},{operation:action.payload});}if(state.prevOperand===\"\"){return _objectSpread(_objectSpread({},state),{},{currentOperand:\"\",prevOperand:state.currentOperand,operation:action.payload});}return _objectSpread(_objectSpread({},state),{},{prevOperand:Evaluate(state),currentOperand:\"\",operation:action.payload});},//when user clicks =\nperformEvaluation:function performEvaluation(state){if(state.operation===\"\"||state.currentOperand===\"\"||state.prevOperand===\"\"){return state;}return _objectSpread(_objectSpread({},state),{},{currentOperand:Evaluate(state),prevOperand:\"\",operation:\"\",overwrite:true});}}});//sending our actions to be used in App.tsx\nvar _digitSlice$actions=digitSlice.actions,addDigit=_digitSlice$actions.addDigit,clearDigit=_digitSlice$actions.clearDigit,removeLastDigit=_digitSlice$actions.removeLastDigit,chooseOperation=_digitSlice$actions.chooseOperation,performEvaluation=_digitSlice$actions.performEvaluation;export{addDigit,clearDigit,removeLastDigit,chooseOperation,performEvaluation};export default digitSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","currentOperand","prevOperand","operation","overwrite","Evaluate","current","parseFloat","prev","isNaN","result","toString","digitSlice","name","reducers","addDigit","state","action","payload","includes","addedDigit","clearDigit","removeLastDigit","remainingDigit","slice","chooseOperation","performEvaluation","actions","reducer"],"sources":["C:/Users/Fomonyuytar/Desktop/learning/calculator/src/store/features/digitSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\n// interface of the state of the app\r\ninterface CalculatorState {\r\n  currentOperand: string;\r\n  prevOperand: string;\r\n  operation: string;\r\n  overwrite: boolean;\r\n}\r\n\r\n// default state\r\nconst initialState: CalculatorState = {\r\n  currentOperand: \"\",\r\n  prevOperand: \"\",\r\n  operation: \"\",\r\n  overwrite: false,\r\n};\r\n\r\n//function  to give results based on the operation choosen\r\nconst Evaluate = ({\r\n  currentOperand,\r\n  prevOperand,\r\n  operation,\r\n}: CalculatorState) => {\r\n  const current = parseFloat(currentOperand);\r\n  const prev = parseFloat(prevOperand);\r\n  //return empty string if both operands ane not numbers\r\n  if (isNaN(current) || isNaN(prev)) return \"\";\r\n\r\n  let result: string | number = \"\";\r\n\r\n  // handle the individual arithmetic operar=tions\r\n  switch (operation) {\r\n    case \"+\":\r\n      result = prev + current;\r\n      break;\r\n    case \"-\":\r\n      result = prev - current;\r\n      break;\r\n    case \"×\":\r\n      result = prev * current;\r\n      break;\r\n\r\n    case \"÷\":\r\n      result = prev / current;\r\n      break;\r\n  }\r\n\r\n  return result.toString();\r\n};\r\n\r\n//Digit Slice in the redux toolkit\r\nexport const digitSlice = createSlice({\r\n  name: \"CalculatorState\",\r\n  initialState,\r\n\r\n  reducers: {\r\n    //handle adding digit behinf the other when clicked\r\n    addDigit: (state, action: PayloadAction<string>) => {\r\n      if (state.overwrite) {\r\n        return {\r\n          ...state,\r\n          overwrite: false,\r\n          currentOperand: action.payload,\r\n        };\r\n      }\r\n      if (state.currentOperand === \"0\" && action.payload === \"0\") {\r\n        return state;\r\n      }\r\n      if (state.currentOperand.includes(\".\") && action.payload === \".\") {\r\n        return state;\r\n      }\r\n\r\n      const addedDigit: string = `${state.currentOperand || \" \"}${\r\n        action.payload\r\n      }`;\r\n      return { ...state, currentOperand: addedDigit };\r\n    },\r\n\r\n    //clearing the screen\r\n    clearDigit: (state) => {\r\n      return {\r\n        ...state,\r\n        currentOperand: \"\",\r\n        prevOperand: \"\",\r\n        operation: \"\",\r\n      };\r\n    },\r\n\r\n    //delete last digit\r\n    removeLastDigit: (state) => {\r\n      const remainingDigit: string = `${state.currentOperand.slice(0, -1)}`;\r\n\r\n      return { ...state, currentOperand: remainingDigit };\r\n    },\r\n\r\n    //choose operation whether + - *\r\n    chooseOperation: (state, action: PayloadAction<string>) => {\r\n      if (state.currentOperand === \"\" && state.prevOperand === \"\") {\r\n        return state;\r\n      }\r\n\r\n      if (state.currentOperand === \"\") {\r\n        return {\r\n          ...state,\r\n          operation: action.payload,\r\n        };\r\n      }\r\n\r\n      if (state.prevOperand === \"\") {\r\n        return {\r\n          ...state,\r\n          currentOperand: \"\",\r\n          prevOperand: state.currentOperand,\r\n          operation: action.payload,\r\n        };\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        prevOperand: Evaluate(state),\r\n        currentOperand: \"\",\r\n        operation: action.payload,\r\n      };\r\n    },\r\n\r\n    //when user clicks =\r\n    performEvaluation: (state) => {\r\n      if (\r\n        state.operation === \"\" ||\r\n        state.currentOperand === \"\" ||\r\n        state.prevOperand === \"\"\r\n      ) {\r\n        return state;\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        currentOperand: Evaluate(state),\r\n        prevOperand: \"\",\r\n        operation: \"\",\r\n        overwrite: true,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\n//sending our actions to be used in App.tsx\r\nexport const {\r\n  addDigit,\r\n  clearDigit,\r\n  removeLastDigit,\r\n  chooseOperation,\r\n  performEvaluation,\r\n} = digitSlice.actions;\r\n\r\nexport default digitSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}