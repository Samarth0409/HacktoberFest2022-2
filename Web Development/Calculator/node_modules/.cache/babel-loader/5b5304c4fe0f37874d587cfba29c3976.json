{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  currrentOperand: \"\",\n  prevOperand: \"\",\n  operation: \"\"\n};\n\nconst Evaluate = (prevOperand, currentOperand, operation) => {\n  const current = parseFloat(currentOperand);\n  const prev = parseFloat(prevOperand);\n  if (isNaN(current) || isNaN(prev)) return \"\";\n  let result = \"\";\n\n  switch (operation) {\n    case \"+\":\n      result = prev + current;\n      break;\n\n    case \"-\":\n      result = prev - current;\n      break;\n\n    case \"x\":\n      result = prev * current;\n      break;\n\n    case \"รท\":\n      result = prev / current;\n      break;\n  }\n\n  return result.toString();\n};\n\n_c = Evaluate;\nexport const digitSlice = createSlice({\n  name: \"CalculatorState\",\n  initialState,\n  reducers: {\n    addDigit: (state, action) => {\n      if (state.currrentOperand === '0' && action.payload === '0') {\n        return state;\n      }\n\n      if (state.currrentOperand.includes('.') && action.payload === '.') {\n        return state;\n      }\n\n      return { ...state,\n        currrentOperand: `${state.currrentOperand || \"\"}${action.payload}`\n      };\n    },\n    clearDigit: state => {\n      return { ...state,\n        currrentOperand: \"\",\n        prevOperand: \"\",\n        operation: \"\"\n      };\n    },\n    removeLastDigit: state => {\n      const remainingDigit = `${state.currrentOperand.slice(0, -1)}`;\n      return { ...state,\n        currrentOperand: remainingDigit\n      };\n    },\n    chooseOperation: (state, action) => {\n      if (state.prevOperand === \"\") {\n        return { ...state,\n          operation: action.payload,\n          prevOperand: state.currrentOperand,\n          currrentOperand: \"\"\n        };\n      }\n\n      return { ...state,\n        prevOperand: Evaluate(state.prevOperand, state.currrentOperand, state.operation),\n        currrentOperand\n      };\n    }\n  }\n});\nexport const {\n  addDigit,\n  clearDigit,\n  removeLastDigit,\n  chooseOperation\n} = digitSlice.actions;\nexport default digitSlice.reducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Evaluate\");","map":{"version":3,"names":["createSlice","initialState","currrentOperand","prevOperand","operation","Evaluate","currentOperand","current","parseFloat","prev","isNaN","result","toString","digitSlice","name","reducers","addDigit","state","action","payload","includes","clearDigit","removeLastDigit","remainingDigit","slice","chooseOperation","actions","reducer"],"sources":["C:/Users/Fomonyuytar/Desktop/learning/calculator/src/store/features/digitSlice.ts"],"sourcesContent":["import { createSlice ,PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\ninterface CalculatorState{\r\n    currrentOperand:string;\r\n        prevOperand?: string;\r\n        operation?:string;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst initialState : CalculatorState= {\r\n  \r\n    \r\n        currrentOperand:\"\",\r\n        prevOperand:\"\",\r\n        operation:\"\"\r\n    \r\n    \r\n\r\n}\r\n\r\n\r\nconst Evaluate= (prevOperand:string , currentOperand:string ,operation:string) => {\r\n\r\n    const current = parseFloat(currentOperand)\r\n    const prev = parseFloat(prevOperand)\r\n\r\n    if(isNaN(current) || isNaN(prev)) return \"\"\r\n \r\n       let result: string | number=\"\"\r\n\r\n    switch (operation){\r\n        case \"+\":\r\n            result=  prev + current\r\n            break\r\n        case \"-\":\r\n            result=  prev - current\r\n            break\r\n        case \"x\":\r\n            result=  prev * current\r\n            break\r\n\r\n        case \"รท\":\r\n            result=  prev / current\r\n            break\r\n}\r\n\r\n    return result.toString()\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const digitSlice =  createSlice({\r\n\r\n    name :\"CalculatorState\",\r\n    initialState,\r\n\r\n    reducers:{\r\n\r\n        addDigit:(state , action:PayloadAction<string>)=>{\r\n            if(state.currrentOperand === '0'&& action.payload ==='0'){\r\n                return  state;\r\n\r\n            }\r\n            if(state.currrentOperand.includes('.')  && action.payload ==='.'){\r\n                return state;\r\n\r\n            }\r\n        return  {\r\n        \r\n                \r\n                    ...state,\r\n                    currrentOperand:`${state.currrentOperand || \"\" }${action.payload}` \r\n                    \r\n                                     \r\n                \r\n                    \r\n                \r\n            }\r\n        },\r\n\r\n        clearDigit:(state)=>{\r\n             \r\n            return {\r\n                ...state,\r\n                currrentOperand:\"\",\r\n                prevOperand:\"\",\r\n                operation:\"\"\r\n\r\n                \r\n            }\r\n\r\n        },\r\n        removeLastDigit: (state )=>{\r\n            const remainingDigit:string=`${state.currrentOperand.slice(0, -1)}`\r\n\r\n            return   { ...state, currrentOperand:remainingDigit }\r\n                \r\n               \r\n                \r\n            \r\n    \r\n        },\r\n        chooseOperation:(state , action:PayloadAction<string> ) => {\r\n\r\n            if(state.prevOperand === \"\"){\r\n\r\n                return{ ...state , operation:action.payload ,prevOperand:state.currrentOperand ,currrentOperand:\"\"}\r\n\r\n            }\r\n\r\n            return {...state , prevOperand:Evaluate(state.prevOperand ,state.currrentOperand ,state.operation),currrentOperand}\r\n        }\r\n    \r\n        \r\n\r\n    }\r\n   \r\n\r\n\r\n}) \r\n\r\n\r\nexport const {addDigit ,clearDigit ,removeLastDigit ,chooseOperation}= digitSlice.actions\r\n\r\n\r\nexport default digitSlice.reducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAiBA,MAAMC,YAA8B,GAAE;EAG9BC,eAAe,EAAC,EAHc;EAI9BC,WAAW,EAAC,EAJkB;EAK9BC,SAAS,EAAC;AALoB,CAAtC;;AAYA,MAAMC,QAAQ,GAAE,CAACF,WAAD,EAAsBG,cAAtB,EAA6CF,SAA7C,KAAkE;EAE9E,MAAMG,OAAO,GAAGC,UAAU,CAACF,cAAD,CAA1B;EACA,MAAMG,IAAI,GAAGD,UAAU,CAACL,WAAD,CAAvB;EAEA,IAAGO,KAAK,CAACH,OAAD,CAAL,IAAkBG,KAAK,CAACD,IAAD,CAA1B,EAAkC,OAAO,EAAP;EAE/B,IAAIE,MAAuB,GAAC,EAA5B;;EAEH,QAAQP,SAAR;IACI,KAAK,GAAL;MACIO,MAAM,GAAGF,IAAI,GAAGF,OAAhB;MACA;;IACJ,KAAK,GAAL;MACII,MAAM,GAAGF,IAAI,GAAGF,OAAhB;MACA;;IACJ,KAAK,GAAL;MACII,MAAM,GAAGF,IAAI,GAAGF,OAAhB;MACA;;IAEJ,KAAK,GAAL;MACII,MAAM,GAAGF,IAAI,GAAGF,OAAhB;MACA;EAbR;;EAgBA,OAAOI,MAAM,CAACC,QAAP,EAAP;AAEH,CA3BD;;KAAMP,Q;AAiCN,OAAO,MAAMQ,UAAU,GAAIb,WAAW,CAAC;EAEnCc,IAAI,EAAE,iBAF6B;EAGnCb,YAHmC;EAKnCc,QAAQ,EAAC;IAELC,QAAQ,EAAC,CAACC,KAAD,EAASC,MAAT,KAAwC;MAC7C,IAAGD,KAAK,CAACf,eAAN,KAA0B,GAA1B,IAAgCgB,MAAM,CAACC,OAAP,KAAkB,GAArD,EAAyD;QACrD,OAAQF,KAAR;MAEH;;MACD,IAAGA,KAAK,CAACf,eAAN,CAAsBkB,QAAtB,CAA+B,GAA/B,KAAwCF,MAAM,CAACC,OAAP,KAAkB,GAA7D,EAAiE;QAC7D,OAAOF,KAAP;MAEH;;MACL,OAAQ,EAGI,GAAGA,KAHP;QAIIf,eAAe,EAAE,GAAEe,KAAK,CAACf,eAAN,IAAyB,EAAI,GAAEgB,MAAM,CAACC,OAAQ;MAJrE,CAAR;IAWC,CAtBI;IAwBLE,UAAU,EAAEJ,KAAD,IAAS;MAEhB,OAAO,EACH,GAAGA,KADA;QAEHf,eAAe,EAAC,EAFb;QAGHC,WAAW,EAAC,EAHT;QAIHC,SAAS,EAAC;MAJP,CAAP;IASH,CAnCI;IAoCLkB,eAAe,EAAGL,KAAD,IAAU;MACvB,MAAMM,cAAqB,GAAE,GAAEN,KAAK,CAACf,eAAN,CAAsBsB,KAAtB,CAA4B,CAA5B,EAA+B,CAAC,CAAhC,CAAmC,EAAlE;MAEA,OAAS,EAAE,GAAGP,KAAL;QAAYf,eAAe,EAACqB;MAA5B,CAAT;IAMH,CA7CI;IA8CLE,eAAe,EAAC,CAACR,KAAD,EAASC,MAAT,KAA2C;MAEvD,IAAGD,KAAK,CAACd,WAAN,KAAsB,EAAzB,EAA4B;QAExB,OAAM,EAAE,GAAGc,KAAL;UAAab,SAAS,EAACc,MAAM,CAACC,OAA9B;UAAuChB,WAAW,EAACc,KAAK,CAACf,eAAzD;UAA0EA,eAAe,EAAC;QAA1F,CAAN;MAEH;;MAED,OAAO,EAAC,GAAGe,KAAJ;QAAYd,WAAW,EAACE,QAAQ,CAACY,KAAK,CAACd,WAAP,EAAoBc,KAAK,CAACf,eAA1B,EAA2Ce,KAAK,CAACb,SAAjD,CAAhC;QAA4FF;MAA5F,CAAP;IACH;EAvDI;AAL0B,CAAD,CAA/B;AAuEP,OAAO,MAAM;EAACc,QAAD;EAAWK,UAAX;EAAuBC,eAAvB;EAAwCG;AAAxC,IAA0DZ,UAAU,CAACa,OAA3E;AAGP,eAAeb,UAAU,CAACc,OAA1B"},"metadata":{},"sourceType":"module"}