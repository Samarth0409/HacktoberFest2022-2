{"ast":null,"code":"//inbuit function to format number\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n  maximumFractionDigits: 0\n}); //format our digits to have commas for thousands and tens of thousands\n\nexport const formatStringtoNumberWithComma = currentDigit => {\n  if (currentDigit == \"\") return;\n  const [integer, decimal] = currentDigit.split(\".\");\n  if (decimal == null) return INTEGER_FORMATTER.format(integer).toString();\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`;\n};","map":{"version":3,"names":["INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","formatStringtoNumberWithComma","currentDigit","integer","decimal","split","format","toString"],"sources":["C:/Users/Fomonyuytar/Desktop/learning/calculator/src/utils/digitFormater.ts"],"sourcesContent":["\r\n  //inbuit function to format number\r\n  const INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\r\n    maximumFractionDigits: 0,\r\n  });\r\n\r\n    //format our digits to have commas for thousands and tens of thousands\r\n  export const formatStringtoNumberWithComma = (currentDigit: string) => {\r\n    if (currentDigit == \"\") return;\r\n    const [integer, decimal] = currentDigit.split(\".\");\r\n    if (decimal == null) return INTEGER_FORMATTER.format(integer).toString();\r\n    return `${INTEGER_FORMATTER.format(integer)}.${decimal}`;\r\n  };"],"mappings":"AACE;AACA,MAAMA,iBAAiB,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;EACvDC,qBAAqB,EAAE;AADgC,CAA/B,CAA1B,C,CAIE;;AACF,OAAO,MAAMC,6BAA6B,GAAIC,YAAD,IAA0B;EACrE,IAAIA,YAAY,IAAI,EAApB,EAAwB;EACxB,MAAM,CAACC,OAAD,EAAUC,OAAV,IAAqBF,YAAY,CAACG,KAAb,CAAmB,GAAnB,CAA3B;EACA,IAAID,OAAO,IAAI,IAAf,EAAqB,OAAOP,iBAAiB,CAACS,MAAlB,CAAyBH,OAAzB,EAAkCI,QAAlC,EAAP;EACrB,OAAQ,GAAEV,iBAAiB,CAACS,MAAlB,CAAyBH,OAAzB,CAAkC,IAAGC,OAAQ,EAAvD;AACD,CALM"},"metadata":{},"sourceType":"module"}