{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // interface of the state of the app\n\n// default state\nconst initialState = {\n  currentOperand: \"\",\n  prevOperand: \"\",\n  operation: \"\",\n  overwrite: false\n}; //function  to give results based on the operation choosen\n\nconst Evaluate = _ref => {\n  let {\n    currentOperand,\n    prevOperand,\n    operation\n  } = _ref;\n  const current = parseFloat(currentOperand);\n  const prev = parseFloat(prevOperand); //return empty string if both operands ane not numbers\n\n  if (isNaN(current) || isNaN(prev)) return \"\";\n  let result = \"\"; // handle the individual arithmetic operar=tions\n\n  switch (operation) {\n    case \"+\":\n      result = prev + current;\n      break;\n\n    case \"-\":\n      result = prev - current;\n      break;\n\n    case \"×\":\n      result = prev * current;\n      break;\n\n    case \"÷\":\n      result = prev / current;\n      break;\n  }\n\n  return result.toString();\n}; //Digit Slice in the redux toolkit\n\n\n_c = Evaluate;\nexport const digitSlice = createSlice({\n  name: \"CalculatorState\",\n  initialState,\n  reducers: {\n    //handle adding digit behinf the other when clicked\n    addDigit: (state, action) => {\n      if (state.overwrite) {\n        return { ...state,\n          overwrite: false,\n          currentOperand: action.payload\n        };\n      }\n\n      if (state.currentOperand === \"0\" && action.payload === \"0\") {\n        return state;\n      }\n\n      if (state.currentOperand.includes(\".\") && action.payload === \".\") {\n        return state;\n      }\n\n      const addedDigit = `${state.currentOperand || \" \"}${action.payload}`;\n      return { ...state,\n        currentOperand: addedDigit\n      };\n    },\n    //clearing the screen\n    clearDigit: state => {\n      return { ...state,\n        currentOperand: \"\",\n        prevOperand: \"\",\n        operation: \"\"\n      };\n    },\n    //delete last digit\n    removeLastDigit: state => {\n      const remainingDigit = `${state.currentOperand.slice(0, -1)}`;\n      return { ...state,\n        currentOperand: remainingDigit\n      };\n    },\n    //choose operation whether + - *\n    chooseOperation: (state, action) => {\n      if (state.currentOperand === \"\" && state.prevOperand === \"\") {\n        return state;\n      }\n\n      if (state.currentOperand === \"\") {\n        return { ...state,\n          operation: action.payload\n        };\n      }\n\n      if (state.prevOperand === \"\") {\n        return { ...state,\n          currentOperand: \"\",\n          prevOperand: state.currentOperand,\n          operation: action.payload\n        };\n      }\n\n      return { ...state,\n        prevOperand: Evaluate(state),\n        currentOperand: \"\",\n        operation: action.payload\n      };\n    },\n    //when user clicks =\n    performEvaluation: state => {\n      if (state.operation === \"\" || state.currentOperand === \"\" || state.prevOperand === \"\") {\n        return state;\n      }\n\n      return { ...state,\n        currentOperand: Evaluate(state),\n        prevOperand: \"\",\n        operation: \"\",\n        overwrite: true\n      };\n    }\n  }\n}); //sending our actions to be used in App.tsx\n\nexport const {\n  addDigit,\n  clearDigit,\n  removeLastDigit,\n  chooseOperation,\n  performEvaluation\n} = digitSlice.actions;\nexport default digitSlice.reducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Evaluate\");","map":{"version":3,"names":["createSlice","initialState","currentOperand","prevOperand","operation","overwrite","Evaluate","current","parseFloat","prev","isNaN","result","toString","digitSlice","name","reducers","addDigit","state","action","payload","includes","addedDigit","clearDigit","removeLastDigit","remainingDigit","slice","chooseOperation","performEvaluation","actions","reducer"],"sources":["C:/Users/Fomonyuytar/Desktop/learning/calculator/src/store/features/digitSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\n// interface of the state of the app\r\ninterface CalculatorState {\r\n  currentOperand: string;\r\n  prevOperand: string;\r\n  operation: string;\r\n  overwrite: boolean;\r\n}\r\n\r\n// default state\r\nconst initialState: CalculatorState = {\r\n  currentOperand: \"\",\r\n  prevOperand: \"\",\r\n  operation: \"\",\r\n  overwrite: false,\r\n};\r\n\r\n//function  to give results based on the operation choosen\r\nconst Evaluate = ({\r\n  currentOperand,\r\n  prevOperand,\r\n  operation,\r\n}: CalculatorState) => {\r\n  const current = parseFloat(currentOperand);\r\n  const prev = parseFloat(prevOperand);\r\n  //return empty string if both operands ane not numbers\r\n  if (isNaN(current) || isNaN(prev)) return \"\";\r\n\r\n  let result: string | number = \"\";\r\n\r\n  // handle the individual arithmetic operar=tions\r\n  switch (operation) {\r\n    case \"+\":\r\n      result = prev + current;\r\n      break;\r\n    case \"-\":\r\n      result = prev - current;\r\n      break;\r\n    case \"×\":\r\n      result = prev * current;\r\n      break;\r\n\r\n    case \"÷\":\r\n      result = prev / current;\r\n      break;\r\n  }\r\n\r\n  return result.toString();\r\n};\r\n\r\n//Digit Slice in the redux toolkit\r\nexport const digitSlice = createSlice({\r\n  name: \"CalculatorState\",\r\n  initialState,\r\n\r\n  reducers: {\r\n    //handle adding digit behinf the other when clicked\r\n    addDigit: (state, action: PayloadAction<string>) => {\r\n      if (state.overwrite) {\r\n        return {\r\n          ...state,\r\n          overwrite: false,\r\n          currentOperand: action.payload,\r\n        };\r\n      }\r\n      if (state.currentOperand === \"0\" && action.payload === \"0\") {\r\n        return state;\r\n      }\r\n      if (state.currentOperand.includes(\".\") && action.payload === \".\") {\r\n        return state;\r\n      }\r\n\r\n      const addedDigit: string = `${state.currentOperand || \" \"}${\r\n        action.payload\r\n      }`;\r\n      return { ...state, currentOperand: addedDigit };\r\n    },\r\n\r\n    //clearing the screen\r\n    clearDigit: (state) => {\r\n      return {\r\n        ...state,\r\n        currentOperand: \"\",\r\n        prevOperand: \"\",\r\n        operation: \"\",\r\n      };\r\n    },\r\n\r\n    //delete last digit\r\n    removeLastDigit: (state) => {\r\n      const remainingDigit: string = `${state.currentOperand.slice(0, -1)}`;\r\n\r\n      return { ...state, currentOperand: remainingDigit };\r\n    },\r\n\r\n    //choose operation whether + - *\r\n    chooseOperation: (state, action: PayloadAction<string>) => {\r\n      if (state.currentOperand === \"\" && state.prevOperand === \"\") {\r\n        return state;\r\n      }\r\n\r\n      if (state.currentOperand === \"\") {\r\n        return {\r\n          ...state,\r\n          operation: action.payload,\r\n        };\r\n      }\r\n\r\n      if (state.prevOperand === \"\") {\r\n        return {\r\n          ...state,\r\n          currentOperand: \"\",\r\n          prevOperand: state.currentOperand,\r\n          operation: action.payload,\r\n        };\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        prevOperand: Evaluate(state),\r\n        currentOperand: \"\",\r\n        operation: action.payload,\r\n      };\r\n    },\r\n\r\n    //when user clicks =\r\n    performEvaluation: (state) => {\r\n      if (\r\n        state.operation === \"\" ||\r\n        state.currentOperand === \"\" ||\r\n        state.prevOperand === \"\"\r\n      ) {\r\n        return state;\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        currentOperand: Evaluate(state),\r\n        prevOperand: \"\",\r\n        operation: \"\",\r\n        overwrite: true,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\n//sending our actions to be used in App.tsx\r\nexport const {\r\n  addDigit,\r\n  clearDigit,\r\n  removeLastDigit,\r\n  chooseOperation,\r\n  performEvaluation,\r\n} = digitSlice.actions;\r\n\r\nexport default digitSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}