{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // interface of the state of the app\n\n// default state \nconst initialState = {\n  currentOperand: \"\",\n  prevOperand: \"\",\n  operation: \"\"\n}; //function  to give results based on the operation choosen\n\nconst Evaluate = _ref => {\n  let {\n    currentOperand,\n    prevOperand,\n    operation\n  } = _ref;\n  const current = parseFloat(currentOperand);\n  const prev = parseFloat(prevOperand); //return empty string if both operands ane not numbers\n\n  if (isNaN(current) || isNaN(prev)) return \"\";\n  let result = \"\"; // handle the individual arithmetic operar=tions\n\n  switch (operation) {\n    case \"+\":\n      result = prev + current;\n      break;\n\n    case \"-\":\n      result = prev - current;\n      break;\n\n    case \"×\":\n      result = prev * current;\n      break;\n\n    case \"÷\":\n      result = prev / current;\n      break;\n  }\n\n  return result.toString();\n}; //Digit Slice in the redux toolkit\n\n\n_c = Evaluate;\nexport const digitSlice = createSlice({\n  name: \"CalculatorState\",\n  initialState,\n  reducers: {\n    //handle adding digit behinf the other when clicked\n    addDigit: (state, action) => {\n      if (state.currentOperand === '0' && action.payload === '0') {\n        return state;\n      }\n\n      if (state.currentOperand.includes('.') && action.payload === '.') {\n        return state;\n      }\n\n      const addedDigit = `${state.currentOperand || \" \"}${action.payload}`;\n      return { ...state,\n        currentOperand: addedDigit\n      };\n    },\n    //clearing the screen\n    clearDigit: state => {\n      return { ...state,\n        currentOperand: \"\",\n        prevOperand: \"\",\n        operation: \"\"\n      };\n    },\n    //delele last digit\n    removeLastDigit: state => {\n      const remainingDigit = `${state.currentOperand.slice(0, -1)}`;\n      return { ...state,\n        currentOperand: remainingDigit\n      };\n    },\n    //choose operation whether + - * \n    chooseOperation: (state, action) => {\n      if (state.currentOperand === \"\") {\n        return { ...state,\n          operation: \"\",\n          prevOperand: \"\"\n        };\n      }\n\n      if (state.prevOperand === \"\") {\n        return { ...state,\n          operation: action.payload,\n          prevOperand: state.currentOperand,\n          currentOperand: \"\"\n        };\n      }\n\n      return { ...state,\n        prevOperand: Evaluate(state),\n        currentOperand: \"\",\n        operation: \"\"\n      };\n    },\n    //when user clicks =\n    performEvaluation: state => {\n      if (state.operation == null || state.currentOperand == null || state.prevOperand == null) {\n        return state;\n      }\n\n      return { ...state,\n        currentOperand: Evaluate(state),\n        prevOperand: \"\",\n        operation: \"\"\n      };\n    }\n  }\n}); //sending our actions to be used in App.tsx\n\nexport const {\n  addDigit,\n  clearDigit,\n  removeLastDigit,\n  chooseOperation,\n  performEvaluation\n} = digitSlice.actions;\nexport default digitSlice.reducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Evaluate\");","map":{"version":3,"names":["createSlice","initialState","currentOperand","prevOperand","operation","Evaluate","current","parseFloat","prev","isNaN","result","toString","digitSlice","name","reducers","addDigit","state","action","payload","includes","addedDigit","clearDigit","removeLastDigit","remainingDigit","slice","chooseOperation","performEvaluation","actions","reducer"],"sources":["C:/Users/Fomonyuytar/Desktop/learning/calculator/src/store/features/digitSlice.ts"],"sourcesContent":["import { createSlice ,PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\n// interface of the state of the app\r\ninterface CalculatorState{\r\n    currentOperand:string;\r\n        prevOperand: string;\r\n        operation:string;\r\n    }\r\n\r\n\r\n    // default state \r\nconst initialState : CalculatorState= {\r\n  \r\n    \r\n        currentOperand:\"\",\r\n        prevOperand:\"\",\r\n        operation:\"\"\r\n    \r\n}\r\n\r\n//function  to give results based on the operation choosen\r\nconst Evaluate= ({currentOperand ,prevOperand ,operation}:CalculatorState) => {\r\n\r\n    const current = parseFloat(currentOperand)\r\n    const prev = parseFloat(prevOperand)\r\n    //return empty string if both operands ane not numbers\r\n    if(isNaN(current) || isNaN(prev)) return \"\"\r\n \r\n       let result: string | number=\"\"\r\n\r\n       // handle the individual arithmetic operar=tions\r\n    switch (operation){\r\n        case \"+\":\r\n            result=  prev + current\r\n            break\r\n        case \"-\":\r\n            result=  prev - current\r\n            break\r\n        case \"×\":\r\n            result=  prev * current\r\n            break\r\n\r\n        case \"÷\":\r\n            result=  prev / current\r\n            break\r\n}\r\n\r\n    return result.toString()\r\n\r\n}\r\n\r\n\r\n//Digit Slice in the redux toolkit\r\nexport const digitSlice =  createSlice({\r\n\r\n    name :\"CalculatorState\",\r\n    initialState,\r\n\r\n    reducers:{\r\n       //handle adding digit behinf the other when clicked\r\n        addDigit:(state , action:PayloadAction<string>)=>{\r\n            if(state.currentOperand === '0'&& action.payload ==='0'){\r\n                return  state;\r\n\r\n            }\r\n            if(state.currentOperand.includes('.')  && action.payload ==='.'){\r\n                return state;\r\n\r\n            }\r\n\r\n            const addedDigit: string=`${state.currentOperand || \" \" }${action.payload}`\r\n        return  { ...state, currentOperand:addedDigit }\r\n        },\r\n\r\n          //clearing the screen\r\n        clearDigit:(state)=>{\r\n             \r\n            return {\r\n                ...state,\r\n                currentOperand:\"\",\r\n                prevOperand:\"\",\r\n                operation:\"\"\r\n\r\n                \r\n            }\r\n\r\n        },\r\n\r\n        //delele last digit\r\n        removeLastDigit: (state )=>{\r\n            const remainingDigit:string=`${state.currentOperand.slice(0, -1)}`\r\n\r\n            return   { ...state, currentOperand:remainingDigit }\r\n                \r\n               \r\n                \r\n            \r\n    \r\n        },\r\n\r\n        //choose operation whether + - * \r\n        chooseOperation:(state , action:PayloadAction<string> ) => {\r\n\r\n            if (state.currentOperand === \"\") {\r\n                return {\r\n                  ...state,\r\n                  operation: \"\",\r\n                  prevOperand:\"\"\r\n                }\r\n              }\r\n\r\n            if(state.prevOperand === \"\"){\r\n\r\n                return{ ...state , operation:action.payload , prevOperand:state.currentOperand , currentOperand:\"\"}\r\n\r\n            }\r\n\r\n          \r\n              \r\n              \r\n              \r\n\r\n\r\n\r\n            return {...state , \r\n                prevOperand:Evaluate(state),\r\n                currentOperand:\"\",\r\n                operation:\"\"\r\n            \r\n            }\r\n        },\r\n\r\n        //when user clicks =\r\n        performEvaluation:( state )=>{\r\n\r\n            if (\r\n                state.operation == null ||\r\n                state.currentOperand == null ||\r\n                state.prevOperand == null\r\n              ) {\r\n                return state }\r\n\r\n            return {\r\n                ...state,\r\n                currentOperand:Evaluate(state),\r\n                prevOperand:\"\",\r\n                operation:\"\"\r\n               \r\n            }\r\n        }\r\n    \r\n        \r\n\r\n    }\r\n   \r\n\r\n\r\n}) \r\n\r\n//sending our actions to be used in App.tsx\r\nexport const {addDigit ,clearDigit ,removeLastDigit ,chooseOperation ,performEvaluation}= digitSlice.actions\r\n\r\n\r\nexport default digitSlice.reducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C,C,CAIA;;AAQI;AACJ,MAAMC,YAA8B,GAAE;EAG9BC,cAAc,EAAC,EAHe;EAI9BC,WAAW,EAAC,EAJkB;EAK9BC,SAAS,EAAC;AALoB,CAAtC,C,CASA;;AACA,MAAMC,QAAQ,GAAE,QAA8D;EAAA,IAA7D;IAACH,cAAD;IAAiBC,WAAjB;IAA8BC;EAA9B,CAA6D;EAE1E,MAAME,OAAO,GAAGC,UAAU,CAACL,cAAD,CAA1B;EACA,MAAMM,IAAI,GAAGD,UAAU,CAACJ,WAAD,CAAvB,CAH0E,CAI1E;;EACA,IAAGM,KAAK,CAACH,OAAD,CAAL,IAAkBG,KAAK,CAACD,IAAD,CAA1B,EAAkC,OAAO,EAAP;EAE/B,IAAIE,MAAuB,GAAC,EAA5B,CAPuE,CASvE;;EACH,QAAQN,SAAR;IACI,KAAK,GAAL;MACIM,MAAM,GAAGF,IAAI,GAAGF,OAAhB;MACA;;IACJ,KAAK,GAAL;MACII,MAAM,GAAGF,IAAI,GAAGF,OAAhB;MACA;;IACJ,KAAK,GAAL;MACII,MAAM,GAAGF,IAAI,GAAGF,OAAhB;MACA;;IAEJ,KAAK,GAAL;MACII,MAAM,GAAGF,IAAI,GAAGF,OAAhB;MACA;EAbR;;EAgBA,OAAOI,MAAM,CAACC,QAAP,EAAP;AAEH,CA5BD,C,CA+BA;;;KA/BMN,Q;AAgCN,OAAO,MAAMO,UAAU,GAAIZ,WAAW,CAAC;EAEnCa,IAAI,EAAE,iBAF6B;EAGnCZ,YAHmC;EAKnCa,QAAQ,EAAC;IACN;IACCC,QAAQ,EAAC,CAACC,KAAD,EAASC,MAAT,KAAwC;MAC7C,IAAGD,KAAK,CAACd,cAAN,KAAyB,GAAzB,IAA+Be,MAAM,CAACC,OAAP,KAAkB,GAApD,EAAwD;QACpD,OAAQF,KAAR;MAEH;;MACD,IAAGA,KAAK,CAACd,cAAN,CAAqBiB,QAArB,CAA8B,GAA9B,KAAuCF,MAAM,CAACC,OAAP,KAAkB,GAA5D,EAAgE;QAC5D,OAAOF,KAAP;MAEH;;MAED,MAAMI,UAAkB,GAAE,GAAEJ,KAAK,CAACd,cAAN,IAAwB,GAAK,GAAEe,MAAM,CAACC,OAAQ,EAA1E;MACJ,OAAQ,EAAE,GAAGF,KAAL;QAAYd,cAAc,EAACkB;MAA3B,CAAR;IACC,CAdI;IAgBH;IACFC,UAAU,EAAEL,KAAD,IAAS;MAEhB,OAAO,EACH,GAAGA,KADA;QAEHd,cAAc,EAAC,EAFZ;QAGHC,WAAW,EAAC,EAHT;QAIHC,SAAS,EAAC;MAJP,CAAP;IASH,CA5BI;IA8BL;IACAkB,eAAe,EAAGN,KAAD,IAAU;MACvB,MAAMO,cAAqB,GAAE,GAAEP,KAAK,CAACd,cAAN,CAAqBsB,KAArB,CAA2B,CAA3B,EAA8B,CAAC,CAA/B,CAAkC,EAAjE;MAEA,OAAS,EAAE,GAAGR,KAAL;QAAYd,cAAc,EAACqB;MAA3B,CAAT;IAMH,CAxCI;IA0CL;IACAE,eAAe,EAAC,CAACT,KAAD,EAASC,MAAT,KAA2C;MAEvD,IAAID,KAAK,CAACd,cAAN,KAAyB,EAA7B,EAAiC;QAC7B,OAAO,EACL,GAAGc,KADE;UAELZ,SAAS,EAAE,EAFN;UAGLD,WAAW,EAAC;QAHP,CAAP;MAKD;;MAEH,IAAGa,KAAK,CAACb,WAAN,KAAsB,EAAzB,EAA4B;QAExB,OAAM,EAAE,GAAGa,KAAL;UAAaZ,SAAS,EAACa,MAAM,CAACC,OAA9B;UAAwCf,WAAW,EAACa,KAAK,CAACd,cAA1D;UAA2EA,cAAc,EAAC;QAA1F,CAAN;MAEH;;MASD,OAAO,EAAC,GAAGc,KAAJ;QACHb,WAAW,EAACE,QAAQ,CAACW,KAAD,CADjB;QAEHd,cAAc,EAAC,EAFZ;QAGHE,SAAS,EAAC;MAHP,CAAP;IAMH,CAxEI;IA0EL;IACAsB,iBAAiB,EAAGV,KAAF,IAAW;MAEzB,IACIA,KAAK,CAACZ,SAAN,IAAmB,IAAnB,IACAY,KAAK,CAACd,cAAN,IAAwB,IADxB,IAEAc,KAAK,CAACb,WAAN,IAAqB,IAHzB,EAII;QACA,OAAOa,KAAP;MAAc;;MAElB,OAAO,EACH,GAAGA,KADA;QAEHd,cAAc,EAACG,QAAQ,CAACW,KAAD,CAFpB;QAGHb,WAAW,EAAC,EAHT;QAIHC,SAAS,EAAC;MAJP,CAAP;IAOH;EA3FI;AAL0B,CAAD,CAA/B,C,CA0GP;;AACA,OAAO,MAAM;EAACW,QAAD;EAAWM,UAAX;EAAuBC,eAAvB;EAAwCG,eAAxC;EAAyDC;AAAzD,IAA6Ed,UAAU,CAACe,OAA9F;AAGP,eAAef,UAAU,CAACgB,OAA1B"},"metadata":{},"sourceType":"module"}